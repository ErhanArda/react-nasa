{"version":3,"sources":["serviceWorker.js","components/Home.js","components/NavBar.js","components/NasaPhoto.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Home","className","to","NavBar","exact","apiKey","process","NasaPhoto","useState","photoData","setPhotoData","useEffect","a","fetch","res","json","data","console","log","fetchPhoto","media_type","src","url","alt","title","fallback","Spinner","style","display","alignSelf","justifyContent","margin","width","height","color","frameBorder","gesture","allow","allowFullScreen","date","explanation","App","component","path","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCPSC,EARF,WACT,OACI,yBAAKC,UAAU,QACX,kBAAC,IAAD,CAAMA,UAAU,YAAYC,GAAG,eAA/B,yB,iDCHG,SAASC,IACpB,OACI,yBAAKF,UAAU,UACX,4BACI,kBAAC,IAAD,CAAMA,UAAU,OAAOC,GAAG,cAAcE,OAAK,GAA7C,kBCFhB,IAAMC,EAASC,2CAEA,SAASC,IAAa,IAAD,EACEC,mBAAS,MADX,mBACzBC,EADyB,KACdC,EADc,KAgBhC,OAbAC,qBAAU,WAAM,4CAGZ,8BAAAC,EAAA,sEACsBC,MAAM,+CAAD,OAC4BR,IAFvD,cACUS,EADV,gBAIuBA,EAAIC,OAJ3B,OAIUC,EAJV,OAKIN,EAAaM,GACbC,QAAQC,IAAIF,GANhB,4CAHY,0DACZG,KAUD,IAEEV,EAGD,oCACI,kBAACN,EAAD,MACA,yBAAKF,UAAU,cACe,UAAzBQ,EAAUW,WAEP,kBAAC,IAAD,CACIC,IAAKZ,EAAUa,IACfC,IAAKd,EAAUe,MACfvB,UAAU,QACVwB,SACI,kBAACC,EAAA,EAAD,CAASC,MAAO,CACZC,QAAS,OAAQC,UAAW,SAAUC,eAAgB,SACtDC,OAAQ,uBAAwBC,MAAO,OAAQC,OAAQ,QACxDC,MAAM,cAIb,4BACIV,MAAM,cACNH,IAAKZ,EAAUa,IACfa,YAAY,IACZC,QAAQ,QACRC,MAAM,kBACNC,iBAAe,EACfrC,UAAU,UAGtB,6BACI,4BAAKQ,EAAUe,OACf,uBAAGvB,UAAU,QAAQQ,EAAU8B,MAC/B,uBAAGtC,UAAU,eAAeQ,EAAU+B,gBAjC/B,8B,UCLZC,EAXH,WACV,OACE,yBAAKxC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyC,UAAW1C,EAAM2C,KAAK,cAAcvC,OAAK,IAChD,kBAAC,IAAD,CAAOsC,UAAWnC,EAAWoC,KAAK,cAAcvC,OAAK,OCJ7DwC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACA,kBAAC,EAAD,QAIFC,SAASC,eAAe,SLoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.f4e70527.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Home = () => {\n    return (\n        <div className=\"home\">\n            <Link className=\"home-link\" to=\"/nasa-photo\">See into the stars!</Link>\n        </div>\n    )\n}\n\nexport default Home\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function NavBar() {\n    return (\n        <div className=\"navbar\">\n            <ul>\n                <Link className=\"link\" to=\"/react-nasa\" exact >Take Me Home</Link>\n            </ul>\n        </div>\n    )\n}","import React, { useState, useEffect } from \"react\";\nimport Image from 'react-shimmer'\nimport { Spinner } from 'reactstrap';\nimport NavBar from \"./NavBar\";\n\nconst apiKey = process.env.REACT_APP_NASA_KEY;\n\nexport default function NasaPhoto() {\n    const [photoData, setPhotoData] = useState(null);\n\n    useEffect(() => {\n        fetchPhoto();\n\n        async function fetchPhoto() {\n            const res = await fetch(\n                `https://api.nasa.gov/planetary/apod?api_key=${apiKey}`\n            );\n            const data = await res.json();\n            setPhotoData(data);\n            console.log(data);\n        }\n    }, []);\n\n    if (!photoData) return <div />;\n\n    return (\n        <>\n            <NavBar />\n            <div className=\"nasa-photo\">\n                {photoData.media_type === \"image\" ? (\n\n                    <Image\n                        src={photoData.url}\n                        alt={photoData.title}\n                        className=\"photo\"\n                        fallback={\n                            <Spinner style={{\n                                display: \"flex\", alignSelf: \"center\", justifyContent: \"center\",\n                                margin: \"5rem 5rem 5rem 5rem \", width: '4rem', height: '4rem'\n                            }} color=\"warning\" />\n                        }\n                    />\n                ) : (\n                        <iframe\n                            title=\"space-video\"\n                            src={photoData.url}\n                            frameBorder=\"0\"\n                            gesture=\"media\"\n                            allow=\"encrypted-media\"\n                            allowFullScreen\n                            className=\"photo\"\n                        />\n                    )}\n                <div>\n                    <h1>{photoData.title}</h1>\n                    <p className=\"date\">{photoData.date}</p>\n                    <p className=\"explanation\">{photoData.explanation}</p>\n                </div>\n            </div>\n        </>\n    );\n}","import React from 'react'\nimport { Switch, Route } from \"react-router-dom\"\nimport { Home } from './components'\nimport { NasaPhoto } from './components'\nimport './App.css'\n\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Switch>\n        <Route component={Home} path=\"/react-nasa\" exact />\n        <Route component={NasaPhoto} path=\"/nasa-photo\" exact />\n      </Switch>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}